//****************************************************************************************************
//! \file CInvGameScene.h
//! Module defines class CInvGameScene, which implements ...
//****************************************************************************************************
//
//****************************************************************************************************
// 3. 10. 2025, V. Pospíšil, gdermog@seznam.cz
//****************************************************************************************************

#ifndef H_CInvGameScene
#define H_CInvGameScene

#include <d3d9.h>

#include <CInvSettings.h>
#include <CInvSettingsRuntime.h>

#include <entity/registry.hpp>

#include <graphics/CInvText.h>
#include <graphics/CInvPrimitive.h>
#include <graphics/CInvSpriteStorage.h>
#include <graphics/CInvCollisionTest.h>
#include <graphics/CInvEffectSpriteBlink.h>

#include <engine/CInvEntityFactory.h>
#include <engine/InvENTTProcessors.h>

namespace Inv
{
  /*! \brief ... */
  class CInvGameScene
  {
  public:

    CInvGameScene(
      const CInvSettings & settings,
      const CInvSpriteStorage & spriteStorage,
      CInvPrimitive & primitives,
      CInvSettingsRuntime & settingsRuntime,
      LPDIRECT3D9 pD3D,
      LPDIRECT3DDEVICE9 pd3dDevice,
      LPDIRECT3DVERTEXBUFFER9 pVB,
      LARGE_INTEGER tickReferencePoint );

    CInvGameScene( const CInvGameScene & ) = delete;
    CInvGameScene & operator=( const CInvGameScene & ) = delete;
    ~CInvGameScene();

    bool GenerateNewScene(
      float sceneTopLeftX, float sceneTopLeftY,
      float sceneBottomRightX, float sceneBottomRightY );
    /*!< \brief Generates a new game scene, with aliens and possible other entities placed at their
         starting positions.

         \param[in] sceneTopLeftX     X coordinate of top left corner of the game scene [px]
         \param[in] sceneTopLeftY     Y coordinate of top left corner of the game scene [px]
         \param[in] sceneBottomRightX X coordinate of bottom right corner of the game scene [px]
         \param[in] sceneBottomRightY Y coordinate of bottom right corner of the game scene [px]
         \returns true if the scene was generated successfully, false otherwise. */

    bool SpawnPlayer();
    /*!< \brief Spawns the player entity at the bottom center of the scene. The player entity
         is created in "invulnerable" state. This cannot be done by procEntitySpawner, because
         there coud be a lot of "noise" around spawning the player ship (as decreasing of lives
         counter and others), so this special function is implemented. */

    bool RenderActualScene(
      LARGE_INTEGER actualTickPoint,
      ControlStateFlags_t controlState,
      ControlValue_t controlValue );
    /*!< \brief Renders the actual game scene using EnTT processors chain.

         \param[in] actualTickPoint Current tick point, used to calculate game situation */

    bool PlayerEntryProcessing( LARGE_INTEGER actTick );

    void Reset( LARGE_INTEGER newTickRefPoint );
    /*!< \brief Resets the game state to initial conditions, ready for a new game.

         \param[in] newTickRefPoint New reference tick point, usually current time */

    void CallbackUnsetActive( entt::entity ent, uint32_t nr );
    /*!< \brief Callback called when entity is to be unset as active, usually when its life
         ends (after dying period) or exits scene area. The entity is eliminated from the
         registry in nearest possible time. */

    void CallbackPlayerInvulnerabilityCanceled( entt::entity ent, uint32_t nr );
    /*!< \brief Callback called when player invulnerability period ends, player can be hit
         by aliens or their missiles again. */

    void CallbackAlienAnimationDone( entt::entity ent, uint32_t nr );
    /*!< \brief Callback called when alien animation is done and can be called again by random event. */

    void CallbackAlienFiringDone( entt::entity ent, uint32_t nr );
    /*!< \brief Callback called when alien firing animation is done and alien can shoot again. */

    void CallbackAlienShootRequested( entt::entity ent, uint32_t nr );
    /*!< \brief Callback called when alien requested to shoot. New missile will be generated by
         appropriate method in nearest possible time (see procEntitySpawner::update()). */

  private:

    bool EliminateEntity( entt::entity entity );
    /*!< \brief Eliminates given entity from the game scene, replacing it by appropriate explosion.
         if the eliminated entity is the player, starts sequence leading to respawn and reducing
         number of lives. */

    void EntityJustPruned( entt::entity entity, uint32_t nr );
    /*!< \brief Callback called by garbage collector when entity is actually pruned from the
         registry. If the pruned entity is the player, appropriate measures are taken (chain of
         events that leads respawn, reduce number of lives, end of game etc. is initiated) */

    void NewSwarm();

    LARGE_INTEGER mTickReferencePoint;
    //!< \brief Reference tick point, used to calculate elapsed time during the game.

    LARGE_INTEGER mDiffTickPoint;


    const CInvSettings & mSettings;
    //!< \brief Reference to global settings

    const CInvSpriteStorage & mSpriteStorage;
    //!< \brief Reference to sprite storage object, used to access sprites.

    CInvPrimitive & mPrimitives;
    //!< \brief Reference to primitive drawer, used to draw basic shapes on screen

    CInvSettingsRuntime & mSettingsRuntime;

    CInvCollisionTest mCollisionTest;
    //!< \brief Collision test object, used to detect collisions between entities

    entt::registry mEnTTRegistry;
    //!< EnTT registry containing all entities and components of the current game scene

    CInvEntityFactory mEntityFactory;
    //<! \brief Entity factory, used to create game actors

    LPDIRECT3D9             mPD3D;
    //<! Direct3D interface, used to create device

    LPDIRECT3DDEVICE9       mPd3dDevice;
    //<! Direct3D device, used to draw on screen

    LPDIRECT3DVERTEXBUFFER9 mPVB;
    //<! Vertex buffer, used to draw primitives

    float mSceneWidth;
    //!< \brief Width of the whole game scene in pixels.
    float mSceneHeight;
    //!< \brief Height of the whole game scene in pixels.

    float mSceneTopLeftX;
    //!< \brief X coordinate of top left corner of the game scene in pixels.
    float mSceneTopLeftY;
    //!< \brief Y coordinate of top left corner of the game scene in pixels.
    float mSceneBottomRightX;
    //!< \brief X coordinate of bottom right corner of the game scene in pixels.
    float mSceneBottomRightY;
    //!< \brief Y coordinate of bottom right corner of the game scene in pixels.

    float mAlienStartingAreaCoefficient;
    //!< \brief Coefficient defining the area at the top of the scene where aliens can start


    float mVXGroup;
    float mVYGroup;

    entt::entity mPlayerEntity;
    float mPlayerWidth;
    float mPlayerHeight;

    bool mPlayerAlive;

    uint32_t mAliensLeft;
    //!< \brief Number of aliens still alive in the scene.

    procGarbageCollector mProcGarbageCollector;
    procActorStateSelector mProcActorStateSelector;
    procEntitySpawner mProcEntitySpawner;
    procPlayerFireUpdater mProcPlayerFireUpdater;
    procPlayerSpeedUpdater mProcPlayerSpeedUpdater;
    procPlayerBoundsGuard mProcPlayerBoundsGuard;
    procAlienBoundsGuard mProcAlienBoundsGuard;
    procActorMover mProcActorMover;
    procActorOutOfSceneCheck mProcActorOutOfSceneCheck;
    procCollisionDetector mProcCollisionDetector;
    procActorRender mProcActorRender;

    static const std::string mPlayerEntryTextAttention;
    static const std::string mPlayerEntryTextReady;
    static const std::string mPlayerEntryTextGo;

    static const float mPlayerEntryTextSecond;

    bool mPlayerEntryInProgress;
    //!< \brief Flag indicating that player entity is entering the scene (after spawn or respawn).

    LARGE_INTEGER mPlayerEntryTick;
    //!< \brief Ticking when player entity started entering the scene.

    std::unique_ptr<CInvText> mTAttention;
    std::unique_ptr<CInvText> mTReady;
    std::unique_ptr<CInvText> mTGo;

    std::shared_ptr<CInvEffectSpriteBlink> mTBlinkEffect;

    float mPlayerEntryLetterSize;

    uint32_t mActualScore;

  };

} // namespace Inv

#endif
